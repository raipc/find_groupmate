// Generated by CoffeeScript 1.8.0
var Groupmate, Question, addColor, answer, checkArray, failed, fillQuestionForm, groupmates, index, questions, shuffle, shuffledQuestions, uncolor, updateField, workingArrayOfMates;

Groupmate = (function() {
  function Groupmate(id, name, darkHair, bornInFirstHalf, rockListener, shortHair, switched, phoneEndsEven) {
    this.id = id;
    this.name = name;
    this.darkHair = darkHair;
    this.bornInFirstHalf = bornInFirstHalf;
    this.rockListener = rockListener;
    this.shortHair = shortHair;
    this.switched = switched;
    this.phoneEndsEven = phoneEndsEven;
  }

  return Groupmate;

})();

groupmates = [new Groupmate(1, "Никита", true, false, false, true, false, true), new Groupmate(2, "Рома", false, true, false, true, true, false), new Groupmate(3, "Аня", false, false, false, false, false, false), new Groupmate(4, "Антон", true, false, true, false, false, false), new Groupmate(5, "Вика", true, false, false, false, false, false), new Groupmate(6, "Денис", true, false, true, false, true, true), new Groupmate(7, "Дима", true, false, true, true, false, false), new Groupmate(8, "Кирилл", true, true, false, true, false, true), new Groupmate(9, "Матвей", true, true, true, true, false, true), new Groupmate(10, "Серёжа", true, true, true, false, false, true), new Groupmate(11, "Серёжа", false, false, true, false, false, false), new Groupmate(12, "Филипп", true, true, true, false, true, true), new Groupmate(13, "Юля", false, true, true, false, false, true), new Groupmate(14, "Алексей", true, true, false, true, false, false), new Groupmate(15, "Аня", false, true, true, false, false, false)];

Question = (function() {
  function Question(text, shortDescr, cond) {
    this.text = text;
    this.shortDescr = shortDescr;
    this.cond = cond;
  }

  return Question;

})();

questions = [
  new Question("У этого человека тёмные волосы?", "тёмные волосы", function(mate) {
    return mate.darkHair === true;
  }), new Question("Этот человек родился в первую половину года (с января по июнь включительно)?", "ранний день рождения", function(mate) {
    return mate.bornInFirstHalf === true;
  }), new Question("Этот человек слушает музыку в жанре рок?", "слушает рок", function(mate) {
    return mate.rockListener === true;
  }), new Question("У этого человека короткие волосы?", "короткие волосы", function(mate) {
    return mate.shortHair === true;
  }), new Question("Этот человек учился на другой специальности перед тем, как поступить на бизнес-информатику?", "перевёлся", function(mate) {
    return mate.switched === true;
  }), new Question("Номер мобильного телефона этого человека заканчивается на чётную цифру?", "чётный номер", function(mate) {
    return mate.phoneEndsEven === true;
  })
];

fillQuestionForm = function(question) {
  var el;
  el = $("#questionText");
  el.hide(500);
  el.text(question.text);
  return el.show(500);
};

uncolor = function(mate) {
  return $("#id" + mate.id).addClass("nocolor");
};

addColor = function(mate) {
  return $("#id" + mate.id).removeClass("nocolor");
};

answer = function(inputArray, question, boolBtn) {
  var toReturn, toUncolor, _ref;
  toUncolor = [];
  toReturn = [];
  inputArray.map(function(mate) {
    if (question.cond(mate)) {
      return toReturn.push(mate);
    } else {
      return toUncolor.push(mate);
    }
  });
  if (!boolBtn) {
    _ref = [toReturn, toUncolor], toUncolor = _ref[0], toReturn = _ref[1];
  }
  $("#choices").append("<p>" + (boolBtn ? "" : "не ") + question.shortDescr + "</p>");
  toUncolor.map(uncolor);
  failed.push(toUncolor);
  return toReturn;
};

shuffle = function (o){
    for(var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
    return o;
};;

shuffledQuestions = shuffle(questions);

workingArrayOfMates = groupmates.slice();

index = 0;

failed = [];

checkArray = function(array) {
  if (array.length === 1) {
    $(".result-img").attr("src", "images/(" + array[0].id + ").png");
    $(".modal-body>h2").text("" + array[0].name);
    $("<button/>", {
      id: "hiddenBtn",
      "data-toggle": "modal",
      "data-target": "#resultModal"
    }).insertAfter($(".navbar-brand")).click().remove();
    return $(".question-form>.btn").attr("disabled", "");
  } else if (array.length === 0) {
    return alert("404");
  }
};

updateField = function() {
  ++index;
  return fillQuestionForm(questions[index]);
};

$(function() {
  $("#yes-btn").click(function() {
    workingArrayOfMates = answer(workingArrayOfMates, shuffledQuestions[index], true);
    checkArray(workingArrayOfMates);
    return updateField();
  });
  $("#no-btn").click(function() {
    workingArrayOfMates = answer(workingArrayOfMates, shuffledQuestions[index], false);
    checkArray(workingArrayOfMates);
    return updateField();
  });
  $("#backBtn").click(function() {
    var t;
    if (index > 0) {
      --index;
      t = failed.pop();
      console.log(t);
      t.map(addColor);
      workingArrayOfMates = workingArrayOfMates.concat(t);
      fillQuestionForm(questions[index]);
      return $("#choices>p:last").remove();
    }
  });
  return fillQuestionForm(questions[index]);
});
